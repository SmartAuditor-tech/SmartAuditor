METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 35 Code Findings │
└──────────────────┘
                                                     
    /g4b/src/challengeV2/libraries/MerkleTreeLib.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
          115┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          125┆ if (i != me.length - 1) {
            ⋮┆----------------------------------------
          188┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          294┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          335┆ require(proofIndex < proof.length, "Index out of range");
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
          115┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          188┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          294┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
          111┆ require(me.length > 0, "Empty merkle expansion");
            ⋮┆----------------------------------------
          112┆ require(me.length <= MAX_LEVEL, "Merkle expansion too large");
            ⋮┆----------------------------------------
          158┆ require(level < MAX_LEVEL, "Level too high");
            ⋮┆----------------------------------------
          159┆ require(subtreeRoot != 0, "Cannot append empty subtree");
            ⋮┆----------------------------------------
          160┆ require(me.length <= MAX_LEVEL, "Merkle expansion too large");
            ⋮┆----------------------------------------
          170┆ require(level < me.length, "Level greater than highest level of  
  current expansion");                                                          
            ⋮┆----------------------------------------
          183┆ require(next.length <= MAX_LEVEL, "Append creates oversize       
  tree");                                                                       
            ⋮┆----------------------------------------
          195┆ require(me[i] == 0, "Append above least significant bit");
            ⋮┆----------------------------------------
          228┆ require(next[next.length - 1] != 0, "Last entry zero");
            ⋮┆----------------------------------------
          265┆ require(startSize < endSize, "Start not less than end");
            ⋮┆----------------------------------------
          287┆ revert("Both y and z cannot be zero");
            ⋮┆----------------------------------------
          320┆ require(preSize > 0, "Pre-size cannot be 0");
            ⋮┆----------------------------------------
          321┆ require(root(preExpansion) == preRoot, "Pre expansion root       
  mismatch");                                                                   
            ⋮┆----------------------------------------
          322┆ require(treeSize(preExpansion) == preSize, "Pre size does not    
  match expansion");                                                            
            ⋮┆----------------------------------------
          323┆ require(preSize < postSize, "Pre size not less than post size");
            ⋮┆----------------------------------------
          335┆ require(proofIndex < proof.length, "Index out of range");
            ⋮┆----------------------------------------
          345┆ require(root(exp) == postRoot, "Post expansion root not equal    
  post");                                                                       
            ⋮┆----------------------------------------
          349┆ require(proofIndex == proof.length, "Incomplete proof usage");
            ⋮┆----------------------------------------
          364┆ require(rootHash == calculatedRoot, "Invalid inclusion proof");
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
          115┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          188┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          294┆ for (uint256 i = 0; i < me.length; i++) {
            ⋮┆----------------------------------------
          341┆ proofIndex++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string.use-short-revert-string     
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
          Details: https://sg.run/E9LB                                          
                                                                                
          170┆ require(level < me.length, "Level greater than highest level of  
  current expansion");                                                          
            ⋮┆----------------------------------------
          195┆ require(me[i] == 0, "Append above least significant bit");
            ⋮┆----------------------------------------
          322┆ require(treeSize(preExpansion) == preSize, "Pre size does not    
  match expansion");                                                            
            ⋮┆----------------------------------------
          345┆ require(root(exp) == postRoot, "Post expansion root not equal    
  post");                                                                       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 35 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
