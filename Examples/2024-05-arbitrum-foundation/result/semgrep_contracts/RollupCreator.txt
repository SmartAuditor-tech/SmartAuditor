METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 15 findings.
                    
                    
┌──────────────────┐
│ 15 Code Findings │
└──────────────────┘
                                      
    /g4b/src/rollup/RollupCreator.sol 
       solidity.best-practice.use-ownable2step.use-ownable2step                 
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
          Details: https://sg.run/yBAA                                          
                                                                                
           17┆ contract RollupCreator is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
          225┆ for (uint256 i = 0; i < deployParams.batchPosters.length; i++) {
            ⋮┆----------------------------------------
          235┆ for (uint256 i = 0; i < deployParams.validators.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor.non-payable-constructor
          Consider making costructor payable to save gas.                  
          Details: https://sg.run/wRBd                                     
                                                                           
           58┆ constructor() Ownable() {}
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
          225┆ for (uint256 i = 0; i < deployParams.batchPosters.length; i++) {
            ⋮┆----------------------------------------
          235┆ for (uint256 i = 0; i < deployParams.validators.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
          152┆ require(
          153┆     deployParams.maxDataSize == ethSequencerInbox.maxDataSize(),
          154┆     "SI_MAX_DATA_SIZE_MISMATCH"
          155┆ );
            ⋮┆----------------------------------------
          156┆ require(
          157┆     deployParams.maxDataSize ==                                  
  ethDelayBufferableSequencerInbox.maxDataSize(),                               
          158┆     "SI_MAX_DATA_SIZE_MISMATCH"
          159┆ );
            ⋮┆----------------------------------------
          160┆ require(deployParams.maxDataSize == ethInbox.maxDataSize(),      
  "I_MAX_DATA_SIZE_MISMATCH");                                                  
            ⋮┆----------------------------------------
          170┆ require(
          171┆     deployParams.maxDataSize ==                                  
  erc20SequencerInbox.maxDataSize(),                                            
          172┆     "SI_MAX_DATA_SIZE_MISMATCH"
          173┆ );
            ⋮┆----------------------------------------
          174┆ require(
          175┆     deployParams.maxDataSize ==                                  
  erc20DelayBufferableSequencerInbox.maxDataSize(),                             
          176┆     "SI_MAX_DATA_SIZE_MISMATCH"
          177┆ );
            ⋮┆----------------------------------------
          178┆ require(
          179┆     deployParams.maxDataSize == erc20Inbox.maxDataSize(),
          180┆     "I_MAX_DATA_SIZE_MISMATCH"
          181┆ );
            ⋮┆----------------------------------------
          305┆ require(sent, "Refund failed");
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
          225┆ for (uint256 i = 0; i < deployParams.batchPosters.length; i++) {
            ⋮┆----------------------------------------
          235┆ for (uint256 i = 0; i < deployParams.validators.length; i++) {


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
