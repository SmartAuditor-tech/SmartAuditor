METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                   
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 8 findings.
                   
┌─────────────────┐
│ 8 Code Findings │
└─────────────────┘
                                                  
    /g4b/src/challengeV2/EdgeChallengeManager.sol 
       solidity.performance.non-payable-constructor.non-payable-constructor
          Consider making costructor payable to save gas.                  
          Details: https://sg.run/wRBd                                     
                                                                           
          300┆ constructor() {
          301┆     _disableInitializers();
          302┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop.state-variable-read-in
  -a-loop                                                                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
          Details: https://sg.run/xADy                                          
                                                                                
          493┆ (bool updated, uint256 newValue) =                               
  store.updateTimerCacheByChildren(edgeIds[i]);                                 
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
          492┆ for (uint256 i = 0; i < edgeIds.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
          376┆ if (whitelistEnabled && !assertionChain.isValidator(msg.sender)) 
  {                                                                             
          377┆     revert NotValidator(msg.sender);
          378┆ }
            ⋮┆----------------------------------------
          429┆ if (address(st) != address(0) && sa != 0) {
          430┆     // since only one edge in a group of rivals can ever be      
  confirmed, we know that we                                                    
          431┆     // will never need to refund more than one edge. Therefore we
  can immediately send                                                          
          432┆     // all stakes provided after the first one to an excess stake
  receiver.                                                                     
          433┆     address receiver = edgeAdded.hasRival ? excessStakeReceiver :
  address(this);                                                                
          434┆     st.safeTransferFrom(msg.sender, receiver, sa);
          435┆ }
            ⋮┆----------------------------------------
          522┆ if (isBlockLevel && assertionChain.isFirstChild(topEdge.claimId))
  {                                                                             
          523┆     assertionChain.validateAssertionHash(
          524┆         topEdge.claimId,
          525┆         claimStateData.assertionState,
          526┆         claimStateData.prevAssertionHash,
          527┆         claimStateData.inboxAcc
          528┆     );
          529┆     assertionBlocks =                                            
  assertionChain.getSecondChildCreationBlock(claimStateData.prevAssertionHash)  
          530┆         -                                                        
  assertionChain.getFirstChildCreationBlock(claimStateData.prevAssertionHash);  
          531┆ }
            ⋮┆----------------------------------------
          580┆ if (address(st) != address(0) && sa != 0) {
          581┆     st.safeTransfer(edge.staker, sa);
          582┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
          492┆ for (uint256 i = 0; i < edgeIds.length; i++) {


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
