METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 15 Code Findings │
└──────────────────┘
                                                     
    /g4b/src/challengeV2/libraries/ArrayUtilsLib.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
           15┆ for (uint256 i = 0; i < arr.length; i++) {
            ⋮┆----------------------------------------
           47┆ for (uint256 i = 0; i < arr1.length; i++) {
            ⋮┆----------------------------------------
           50┆ for (uint256 i = 0; i < arr2.length; i++) {
            ⋮┆----------------------------------------
           51┆ full[arr1.length + i] = arr2[i];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
           15┆ for (uint256 i = 0; i < arr.length; i++) {
            ⋮┆----------------------------------------
           36┆ for (uint256 i = startIndex; i < endIndex; i++) {
            ⋮┆----------------------------------------
           47┆ for (uint256 i = 0; i < arr1.length; i++) {
            ⋮┆----------------------------------------
           50┆ for (uint256 i = 0; i < arr2.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
           32┆ require(startIndex < endIndex, "Start not less than end");
            ⋮┆----------------------------------------
           33┆ require(endIndex <= arr.length, "End not less or equal than      
  length");                                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
           15┆ for (uint256 i = 0; i < arr.length; i++) {
            ⋮┆----------------------------------------
           36┆ for (uint256 i = startIndex; i < endIndex; i++) {
            ⋮┆----------------------------------------
           47┆ for (uint256 i = 0; i < arr1.length; i++) {
            ⋮┆----------------------------------------
           50┆ for (uint256 i = 0; i < arr2.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string.use-short-revert-string     
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
          Details: https://sg.run/E9LB                                          
                                                                                
           33┆ require(endIndex <= arr.length, "End not less or equal than      
  length");                                                                     

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 15 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
