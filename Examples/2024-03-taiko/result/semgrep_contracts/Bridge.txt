METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                   
                   
┌─────────────────┐
│ 6 Code Findings │
└─────────────────┘
                                                       
    /g4b/packages/protocol/contracts/bridge/Bridge.sol 
       solidity.performance.state-variable-read-in-a-loop.state-variable-read-in
  -a-loop                                                                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
          Details: https://sg.run/xADy                                          
                                                                                
           92┆ proofReceipt[msgHash].receivedAt = _timestamp;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
           90┆ for (uint256 i; i < _msgHashes.length; ++i) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
          250┆ if (invocationDelay != 0 && msg.sender !=                        
  proofReceipt[msgHash].preferredExecutor) {                                    
          251┆     // If msg.sender is not the one that proved the message, then
  there                                                                         
          252┆     // is an extra delay.
          253┆     unchecked {
          254┆         invocationDelay += invocationExtraDelay;
          255┆     }
          256┆ }
            ⋮┆----------------------------------------
          260┆ if (_message.gasLimit == 0 && msg.sender != _message.destOwner) {
          261┆     revert B_PERMISSION_DENIED();
          262┆ }
            ⋮┆----------------------------------------
          439┆ } else if (block.chainid >= 32_300 && block.chainid <= 32_400) {
          440┆     // For all Taiko internal devnets
          441┆     return (5 minutes, 384 seconds);
          442┆ } else {
          443┆     // This is a Taiko L2 chain where no deleys are applied.
          444┆     return (0, 0);
          445┆ }
            ⋮┆----------------------------------------
          490┆ if (
          491┆     _message.data.length >= 4 // msg can be empty
          492┆         && bytes4(_message.data) !=                              
  IMessageInvocable.onMessageInvocation.selector                                
          493┆         && _message.to.isContract()
          494┆ ) {
          495┆     success_ = false;
          496┆ } else {
          497┆     (success_,) = ExcessivelySafeCall.excessivelySafeCall(
          498┆         _message.to,
          499┆         _gasLimit,
             [hid 5 additional lines, adjust with --max-lines-per-finding] 

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Partially scanned: 1 files only partially analyzed due to parsing or internal Semgrep errors

Ran 50 rules on 1 file: 6 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
