METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                   
                   
┌─────────────────┐
│ 6 Code Findings │
└─────────────────┘
                                                              
    /g4b/packages/protocol/contracts/signal/SignalService.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
          104┆ for (uint256 i; i < hopProofs.length; ++i) {
            ⋮┆----------------------------------------
          108┆ bool isLastHop = i == hopProofs.length - 1;
            ⋮┆----------------------------------------
          120┆ bool isFullProof = hop.accountProof.length > 0;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
          104┆ for (uint256 i; i < hopProofs.length; ++i) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
          285┆ if (cacheStateRoot && _isFullProof && !_isLastHop) {
          286┆     _syncChainData(_chainId, LibSignals.STATE_ROOT, _blockId,    
  _hop.rootHash);                                                               
          287┆ }
            ⋮┆----------------------------------------
          293┆ if (cacheSignalRoot && (_isFullProof || !_isLastHop)) {
          294┆     _syncChainData(_chainId, LibSignals.SIGNAL_ROOT, _blockId,   
  _signalRoot);                                                                 
          295┆ }

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Partially scanned: 1 files only partially analyzed due to parsing or internal Semgrep errors

Ran 50 rules on 1 file: 6 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
