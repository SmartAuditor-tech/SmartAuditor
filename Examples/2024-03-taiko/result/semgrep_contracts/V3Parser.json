{
    "success": true,
    "finding_length": 53,
    "findings": [
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 153
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 153
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 281
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 77
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 78
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 79
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 80
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 81
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 82
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 83
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 84
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 85
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 86
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 87
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 88
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 89
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 90
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 91
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 92
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 93
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 94
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 95
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 96
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 97
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 98
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 99
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 100
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 101
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 102
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 103
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 104
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 116
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 279
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 77
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 78
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 79
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 80
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 81
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 82
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 83
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 84
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 85
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 86
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 94
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 95
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 96
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 97
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 98
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 99
        },
        {
            "classification": [],
            "name": "use-short-revert-string",
            "category": "performance",
            "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met. Details: https://sg.run/E9LB",
            "line": 87
        },
        {
            "classification": [],
            "name": "use-short-revert-string",
            "category": "performance",
            "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met. Details: https://sg.run/E9LB",
            "line": 88
        },
        {
            "classification": [],
            "name": "use-short-revert-string",
            "category": "performance",
            "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met. Details: https://sg.run/E9LB",
            "line": 89
        },
        {
            "classification": [],
            "name": "use-short-revert-string",
            "category": "performance",
            "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met. Details: https://sg.run/E9LB",
            "line": 90
        }
    ]
}