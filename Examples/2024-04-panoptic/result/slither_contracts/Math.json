{
    "success": true,
    "finding_length": 9,
    "findings": [
        {
            "name": "incorrect-exp",
            "impact": "High",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#117)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 117
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#105)\n\t- result = prod0 * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#132)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 132
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 123
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#117)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 117
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#126)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 126
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#122)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 122
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#125)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 125
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#121)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 121
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124)\n",
            "filename": "Math.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 124
        }
    ]
}