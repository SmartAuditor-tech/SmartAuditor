METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 10 Code Findings │
└──────────────────┘
                                          
    /g4b/src/SmartWallet/MultiOwnable.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
          163┆ for (uint256 i; i < owners.length; i++) {
            ⋮┆----------------------------------------
          164┆ if (owners[i].length != 32 && owners[i].length != 64) {
            ⋮┆----------------------------------------
          164┆ if (owners[i].length != 32 && owners[i].length != 64) {
            ⋮┆----------------------------------------
          168┆ if (owners[i].length == 32 && uint256(bytes32(owners[i])) >      
  type(uint160).max) {                                                          
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
          163┆ for (uint256 i; i < owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
          164┆ if (owners[i].length != 32 && owners[i].length != 64) {
          165┆     revert InvalidOwnerBytesLength(owners[i]);
          166┆ }
            ⋮┆----------------------------------------
          168┆ if (owners[i].length == 32 && uint256(bytes32(owners[i])) >      
  type(uint160).max) {                                                          
          169┆     revert InvalidEthereumAddressOwner(owners[i]);
          170┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
          163┆ for (uint256 i; i < owners.length; i++) {
            ⋮┆----------------------------------------
          172┆ _addOwnerAtIndex(owners[i],                                      
  _getMultiOwnableStorage().nextOwnerIndex++);                                  
            ⋮┆----------------------------------------
          180┆ _addOwnerAtIndex(owner,                                          
  _getMultiOwnableStorage().nextOwnerIndex++);                                  

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Partially scanned: 1 files only partially analyzed due to parsing or internal Semgrep errors

Ran 50 rules on 1 file: 10 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
