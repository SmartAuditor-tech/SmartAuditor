METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                   
                   
┌─────────────────┐
│ 3 Code Findings │
└─────────────────┘
                                                      
    /g4b/contracts/facets/PrimaryLiquidationFacet.sol 
       solidity.performance.non-payable-constructor.non-payable-constructor
          Consider making costructor payable to save gas.                  
          Details: https://sg.run/wRBd                                     
                                                                           
           30┆ constructor(address _dusd) {
           31┆     dusd = _dusd;
           32┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
          100┆ if (
          101┆     // Checks for no eligible asks
          102┆     (lowestAskKey == C.TAIL ||                                   
  s.asks[m.asset][lowestAskKey].price > bufferPrice)                            
          103┆     // Checks for no eligible shorts
          104┆     && (
          105┆         startingShortId == C.HEAD // means no short >=           
  oracleprice                                                                   
          106┆             || s.shorts[m.asset][startingShortId].price >        
  bufferPrice                                                                   
          107┆     )
          108┆ ) {
          109┆     revert Errors.NoSells();
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
          263┆ if (m.loseCollateral && m.shorter != address(this)) {
          264┆     // Delete partially liquidated short
          265┆     LibShortRecord.deleteShortRecord(m.asset, m.shorter,         
  m.short.id);                                                                  
          266┆     // Absorb leftovers into TAPP short
          267┆     LibShortRecord.fillShortRecord(
          268┆         m.asset,
          269┆         address(this),
          270┆         C.SHORT_STARTING_ID,
          271┆         SR.FullyFilled,
          272┆         m.short.collateral,
             [hid 5 additional lines, adjust with --max-lines-per-finding] 

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 3 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
