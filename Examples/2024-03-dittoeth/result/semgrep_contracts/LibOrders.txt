METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 15 Code Findings │
└──────────────────┘
                                           
    /g4b/contracts/libraries/LibOrders.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
          743┆ for (uint256 i = 0; i < shortHintArray.length;) {
            ⋮┆----------------------------------------
          832┆ for (uint256 i; i < orderHintArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
           71┆ for (uint256 i = 0; i < size; i++) {
            ⋮┆----------------------------------------
          832┆ for (uint256 i; i < orderHintArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
          241┆ if (check1 && check2) {
          242┆     return C.EXACT;
          243┆ } else if (!check1) {
          244┆     return C.PREV;
          245┆ } else if (!check2) {
          246┆     return C.NEXT;
          247┆ }
            ⋮┆----------------------------------------
          272┆ if (check1 && check2) {
          273┆     return C.EXACT;
          274┆ } else if (!check1) {
          275┆     return C.PREV;
          276┆ } else if (!check2) {
          277┆     return C.NEXT;
          278┆ }
            ⋮┆----------------------------------------
          506┆ if (!b.isMovingBack && !b.isMovingFwd) {
          507┆     // @dev Handles only matching one thing
          508┆     // @dev If does not get fully matched, b.matchedShortId == 0 
  and therefore not hit this block                                              
          509┆     _updateOrders(s.shorts, asset, b.prevShortId,                
  b.matchedShortId);                                                            
          510┆ } else if (!b.isMovingBack && b.isMovingFwd) {
          511┆     // @dev Handles moving forward only
          512┆     _updateOrders(s.shorts, asset, b.firstShortIdBelowOracle,    
  b.matchedShortId);                                                            
          513┆ } else if (b.isMovingBack && !b.isMovingFwd) {
          514┆     //@handles moving backwards only.
          515┆     _updateOrders(s.shorts, asset, b.prevShortId, b.shortHintId);
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
          510┆ } else if (!b.isMovingBack && b.isMovingFwd) {
          511┆     // @dev Handles moving forward only
          512┆     _updateOrders(s.shorts, asset, b.firstShortIdBelowOracle,    
  b.matchedShortId);                                                            
          513┆ } else if (b.isMovingBack && !b.isMovingFwd) {
          514┆     //@handles moving backwards only.
          515┆     _updateOrders(s.shorts, asset, b.prevShortId, b.shortHintId);
          516┆ } else if (b.isMovingBack && b.isMovingFwd) {
          517┆     uint16 id = b.prevShortId == b.firstShortIdBelowOracle ?     
  b.shortHintId : b.matchedShortId;                                             
          518┆     // @dev Handle going backward and forward
          519┆     _updateOrders(s.shorts, asset, b.firstShortIdBelowOracle,    
  id);                                                                          
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
          513┆ } else if (b.isMovingBack && !b.isMovingFwd) {
          514┆     //@handles moving backwards only.
          515┆     _updateOrders(s.shorts, asset, b.prevShortId, b.shortHintId);
          516┆ } else if (b.isMovingBack && b.isMovingFwd) {
          517┆     uint16 id = b.prevShortId == b.firstShortIdBelowOracle ?     
  b.shortHintId : b.matchedShortId;                                             
          518┆     // @dev Handle going backward and forward
          519┆     _updateOrders(s.shorts, asset, b.firstShortIdBelowOracle,    
  id);                                                                          
          520┆ }
            ⋮┆----------------------------------------
          516┆ } else if (b.isMovingBack && b.isMovingFwd) {
          517┆     uint16 id = b.prevShortId == b.firstShortIdBelowOracle ?     
  b.shortHintId : b.matchedShortId;                                             
          518┆     // @dev Handle going backward and forward
          519┆     _updateOrders(s.shorts, asset, b.firstShortIdBelowOracle,    
  id);                                                                          
          520┆ }
            ⋮┆----------------------------------------
          821┆ } else if (incomingShort.price < startingShortPrice &&           
  incomingShort.price >= savedPrice) {                                          
          822┆     Asset.startingShortId = incomingShort.id;
          823┆ }
            ⋮┆----------------------------------------
          840┆ } else if (!anyOrderHintPrevMatched && order.prevOrderType ==    
  O.Matched) {                                                                  
          841┆     anyOrderHintPrevMatched = true;
          842┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
           64┆ size++;
            ⋮┆----------------------------------------
           71┆ for (uint256 i = 0; i < size; i++) {
            ⋮┆----------------------------------------
          832┆ for (uint256 i; i < orderHintArray.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 15 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
