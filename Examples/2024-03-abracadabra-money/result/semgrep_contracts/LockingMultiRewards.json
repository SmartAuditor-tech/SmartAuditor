{
    "success": true,
    "finding_length": 47,
    "findings": [
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 405
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 410
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 417
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 427
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 547
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 561
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 575
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 580
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 614
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 441
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 465
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 473
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 486
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 112
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 113
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 114
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 115
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 116
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 117
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 118
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 119
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 120
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 121
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 407
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 408
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 417
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 430
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 431
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 441
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 442
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 547
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 548
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 561
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 562
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 575
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 576
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 614
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 615
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 616
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 619
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 648
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 326
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 327
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 328
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 417
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 418
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 419
        }
    ]
}