{
    "success": true,
    "finding_length": 10,
    "findings": [
        {
            "classification": [],
            "name": "init-variables-with-default-value",
            "category": "performance",
            "message": "h-default-value Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas. Details: https://sg.run/Ne5N",
            "line": 45
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 47
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 48
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 49
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 125
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 76
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 129
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 150
        },
        {
            "classification": [],
            "name": "use-short-revert-string",
            "category": "performance",
            "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met. Details: https://sg.run/E9LB",
            "line": 76
        },
        {
            "classification": [],
            "name": "use-short-revert-string",
            "category": "performance",
            "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met. Details: https://sg.run/E9LB",
            "line": 150
        }
    ]
}