METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                   
                   
┌─────────────────┐
│ 9 Code Findings │
└─────────────────┘
                                   
    /g4b/src/pools/PoolsConfig.sol 
       solidity.best-practice.use-ownable2step.use-ownable2step                 
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
          Details: https://sg.run/yBAA                                          
                                                                                
           11┆ contract PoolsConfig is IPoolsConfig, Ownable
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment.inefficient-sta
  te-variable-increment                                                         
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.   
          Details: https://sg.run/bp9v                                          
                                                                                
           82┆ maximumWhitelistedPools += 10;
            ⋮┆----------------------------------------
           99┆ maximumInternalSwapPercentTimes1000 += 250;
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
           47┆ require( _whitelist.length() < maximumWhitelistedPools, "Maximum 
  number of whitelisted pools already reached" );                               
            ⋮┆----------------------------------------
           48┆ require(tokenA != tokenB, "tokenA and tokenB cannot be the same  
  token");                                                                      
            ⋮┆----------------------------------------
          136┆ require(address(pair.tokenA) != address(0) &&                    
  address(pair.tokenB) != address(0), "This poolID does not exist");            
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require.use-multiple-require           
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
          Details: https://sg.run/vGA0                                          
                                                                                
          136┆ require(address(pair.tokenA) != address(0) &&                    
  address(pair.tokenB) != address(0), "This poolID does not exist");            
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string.use-short-revert-string     
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
          Details: https://sg.run/E9LB                                          
                                                                                
           47┆ require( _whitelist.length() < maximumWhitelistedPools, "Maximum 
  number of whitelisted pools already reached" );                               
            ⋮┆----------------------------------------
           48┆ require(tokenA != tokenB, "tokenA and tokenB cannot be the same  
  token");                                                                      

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 9 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
