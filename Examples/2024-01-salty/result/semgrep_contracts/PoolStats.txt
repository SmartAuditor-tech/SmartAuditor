METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 17 Code Findings │
└──────────────────┘
                                 
    /g4b/src/pools/PoolStats.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
           65┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
           81┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
          106┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop.state-variable-read-in
  -a-loop                                                                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
          Details: https://sg.run/xADy                                          
                                                                                
           94┆ ArbitrageIndicies memory indicies = _arbitrageIndicies[poolID];
            ⋮┆----------------------------------------
           96┆ _arbitrageIndicies[poolID] = ArbitrageIndicies(poolIndex1,       
  poolIndex2, poolIndex3);                                                      
            ⋮┆----------------------------------------
          112┆ uint256 arbitrageProfit = _arbitrageProfits[poolID] / 3;
            ⋮┆----------------------------------------
          115┆ ArbitrageIndicies memory indicies = _arbitrageIndicies[poolID];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
           65┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
           81┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
          106┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
           49┆ require(msg.sender == address(exchangeConfig.upkeep()),          
  "PoolStats.clearProfitsForPools is only callable from the Upkeep contract" ); 
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
           87┆ if ( (arbToken2 != _weth) && (arbToken3 != _weth) )
           88┆  
  {             
           89┆    uint64 poolIndex1 = _poolIndex( _weth, arbToken2, poolIDs
  );                                                                       
           90┆    uint64 poolIndex2 = _poolIndex( arbToken2, arbToken3, poolIDs
  );                                                                           
           91┆    uint64 poolIndex3 = _poolIndex( arbToken3, _weth, poolIDs
  );                                                                       
           92┆ 
           93┆    // Check if the indicies in storage have the correct values - 
  and if not then update them                                                   
           94┆    ArbitrageIndicies memory indicies =                         
  _arbitrageIndicies[poolID];                                                 
           95┆    if ( ( poolIndex1 != indicies.index1 ) || ( poolIndex2 !=     
  indicies.index2 ) || ( poolIndex3 != indicies.index3 ) )                      
           96┆            _arbitrageIndicies[poolID] =                          
  ArbitrageIndicies(poolIndex1, poolIndex2, poolIndex3);                        
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
           53┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
           65┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
           81┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
          106┆ for( uint256 i = 0; i < poolIDs.length; i++ )
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string.use-short-revert-string     
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
          Details: https://sg.run/E9LB                                          
                                                                                
           49┆ require(msg.sender == address(exchangeConfig.upkeep()),          
  "PoolStats.clearProfitsForPools is only callable from the Upkeep contract" ); 

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 17 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
