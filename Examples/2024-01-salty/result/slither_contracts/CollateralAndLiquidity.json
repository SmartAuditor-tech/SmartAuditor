{
    "success": true,
    "finding_length": 28,
    "findings": [
        {
            "name": "incorrect-exp",
            "impact": "High",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#116)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 116
        },
        {
            "name": "reentrancy-eth",
            "impact": "High",
            "confidence": "Medium",
            "message": "Reentrancy in CollateralAndLiquidity.liquidateUser(address) (src/stable/CollateralAndLiquidity.sol#140-188):\n\tExternal calls:\n\t- (reclaimedWBTC,reclaimedWETH) = pools.removeLiquidity(wbtc,weth,userCollateralAmount,0,0,totalShares[collateralPoolID]) (src/stable/CollateralAndLiquidity.sol#151)\n\t- _decreaseUserShare(wallet,collateralPoolID,userCollateralAmount,true) (src/stable/CollateralAndLiquidity.sol#154)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#122)\n\t\t- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)\n\t\t- salt.safeTransfer(wallet,claimableRewards) (src/staking/StakingRewards.sol#137)\n\t- wbtc.safeTransfer(msg.sender,rewardedWBTC) (src/stable/CollateralAndLiquidity.sol#172)\n\t- weth.safeTransfer(msg.sender,rewardedWETH) (src/stable/CollateralAndLiquidity.sol#173)\n\t- wbtc.safeTransfer(address(liquidizer),reclaimedWBTC - rewardedWBTC) (src/stable/CollateralAndLiquidity.sol#176)\n\t- weth.safeTransfer(address(liquidizer),reclaimedWETH - rewardedWETH) (src/stable/CollateralAndLiquidity.sol#177)\n\t- liquidizer.incrementBurnableUSDS(originallyBorrowedUSDS) (src/stable/CollateralAndLiquidity.sol#181)\n\tExternal calls sending eth:\n\t- _decreaseUserShare(wallet,collateralPoolID,userCollateralAmount,true) (src/stable/CollateralAndLiquidity.sol#154)\n\t\t- (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#135)\n\tState variables written after the call(s):\n\t- usdsBorrowedByUsers[wallet] = 0 (src/stable/CollateralAndLiquidity.sol#184)\n\tCollateralAndLiquidity.usdsBorrowedByUsers (src/stable/CollateralAndLiquidity.sol#49) can be used in cross function reentrancies:\n\t- CollateralAndLiquidity.canUserBeLiquidated(address) (src/stable/CollateralAndLiquidity.sol#297-308)\n\t- CollateralAndLiquidity.findLiquidatableUsers(uint256,uint256) (src/stable/CollateralAndLiquidity.sol#311-342)\n\t- CollateralAndLiquidity.maxBorrowableUSDS(address) (src/stable/CollateralAndLiquidity.sol#268-287)\n\t- CollateralAndLiquidity.maxWithdrawableCollateral(address) (src/stable/CollateralAndLiquidity.sol#241-262)\n\t- CollateralAndLiquidity.usdsBorrowedByUsers (src/stable/CollateralAndLiquidity.sol#49)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-107",
                " DASP-1"
            ],
            "function": "liquidateUser",
            "contract": "CollateralAndLiquidity",
            "line": 49
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 123
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#116)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 116
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PoolMath._zapSwapAmount(uint256,uint256,uint256,uint256) (src/pools/PoolMath.sol#152-207) performs a multiplication on the result of a division:\n\t- C = r0 * (r1 * z0 - r0 * z1) / (r1 + z1) (src/pools/PoolMath.sol#192)\n\t- discriminant = B * B + 4 * A * C (src/pools/PoolMath.sol#193)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "_zapSwapAmount",
            "contract": "PoolMath",
            "line": 193
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "CollateralAndLiquidity.findLiquidatableUsers(uint256,uint256) (src/stable/CollateralAndLiquidity.sol#311-342) performs a multiplication on the result of a division:\n\t- minCollateralValue = (usdsBorrowedByUsers[wallet] * stableConfig.minimumCollateralRatioPercent()) / 100 (src/stable/CollateralAndLiquidity.sol#326)\n\t- minCollateral = (minCollateralValue * totalCollateralShares) / totalCollateralValue (src/stable/CollateralAndLiquidity.sol#329)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "findLiquidatableUsers",
            "contract": "CollateralAndLiquidity",
            "line": 329
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#120)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 120
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "CollateralAndLiquidity.liquidateUser(address) (src/stable/CollateralAndLiquidity.sol#140-188) performs a multiplication on the result of a division:\n\t- rewardedWETH = (reclaimedWETH * rewardPercent) / 100 (src/stable/CollateralAndLiquidity.sol#160)\n\t- rewardedWETH = (rewardedWETH * maxRewardValue) / rewardValue (src/stable/CollateralAndLiquidity.sol#168)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "liquidateUser",
            "contract": "CollateralAndLiquidity",
            "line": 168
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#121)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 121
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#122)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 122
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#104)\n\t- result = prod0 * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#131)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 131
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#125)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 125
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#101)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#124)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 124
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "CollateralAndLiquidity.liquidateUser(address) (src/stable/CollateralAndLiquidity.sol#140-188) performs a multiplication on the result of a division:\n\t- rewardedWBTC = (reclaimedWBTC * rewardPercent) / 100 (src/stable/CollateralAndLiquidity.sol#159)\n\t- rewardedWBTC = (rewardedWBTC * maxRewardValue) / rewardValue (src/stable/CollateralAndLiquidity.sol#167)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "liquidateUser",
            "contract": "CollateralAndLiquidity",
            "line": 167
        },
        {
            "name": "incorrect-equality",
            "impact": "Medium",
            "confidence": "High",
            "message": "StakingRewards.userRewardForPool(address,bytes32) (src/staking/StakingRewards.sol#232-252) uses a dangerous strict equality:\n\t- user.userShare == 0 (src/staking/StakingRewards.sol#239)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "userRewardForPool",
            "contract": "StakingRewards",
            "line": 239
        },
        {
            "name": "incorrect-equality",
            "impact": "Medium",
            "confidence": "High",
            "message": "CollateralAndLiquidity.maxBorrowableUSDS(address) (src/stable/CollateralAndLiquidity.sol#268-287) uses a dangerous strict equality:\n\t- userShareForPool(wallet,collateralPoolID) == 0 (src/stable/CollateralAndLiquidity.sol#271)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "maxBorrowableUSDS",
            "contract": "CollateralAndLiquidity",
            "line": 271
        },
        {
            "name": "incorrect-equality",
            "impact": "Medium",
            "confidence": "High",
            "message": "CollateralAndLiquidity.userCollateralValueInUSD(address) (src/stable/CollateralAndLiquidity.sol#221-236) uses a dangerous strict equality:\n\t- userCollateralAmount == 0 (src/stable/CollateralAndLiquidity.sol#224)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "userCollateralValueInUSD",
            "contract": "CollateralAndLiquidity",
            "line": 224
        },
        {
            "name": "incorrect-equality",
            "impact": "Medium",
            "confidence": "High",
            "message": "CollateralAndLiquidity.maxWithdrawableCollateral(address) (src/stable/CollateralAndLiquidity.sol#241-262) uses a dangerous strict equality:\n\t- userCollateralAmount == 0 (src/stable/CollateralAndLiquidity.sol#246)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "maxWithdrawableCollateral",
            "contract": "CollateralAndLiquidity",
            "line": 246
        },
        {
            "name": "incorrect-equality",
            "impact": "Medium",
            "confidence": "High",
            "message": "StakingRewards.userRewardForPool(address,bytes32) (src/staking/StakingRewards.sol#232-252) uses a dangerous strict equality:\n\t- totalShares[poolID] == 0 (src/staking/StakingRewards.sol#235)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [],
            "function": "userRewardForPool",
            "contract": "StakingRewards",
            "line": 235
        },
        {
            "name": "reentrancy-no-eth",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Reentrancy in Liquidity._depositLiquidityAndIncreaseShare(IERC20,IERC20,uint256,uint256,uint256,bool) (src/staking/Liquidity.sol#83-117):\n\tExternal calls:\n\t- tokenA.safeTransferFrom(msg.sender,address(this),maxAmountA) (src/staking/Liquidity.sol#88)\n\t- tokenB.safeTransferFrom(msg.sender,address(this),maxAmountB) (src/staking/Liquidity.sol#89)\n\t- (maxAmountA,maxAmountB) = _dualZapInLiquidity(tokenA,tokenB,maxAmountA,maxAmountB) (src/staking/Liquidity.sol#93)\n\t\t- tokenA.approve(address(pools),swapAmountA) (src/staking/Liquidity.sol#58)\n\t\t- zapAmountB += pools.depositSwapWithdraw(tokenA,tokenB,swapAmountA,0,block.timestamp) (src/staking/Liquidity.sol#62)\n\t\t- tokenB.approve(address(pools),swapAmountB) (src/staking/Liquidity.sol#68)\n\t\t- zapAmountA += pools.depositSwapWithdraw(tokenB,tokenA,swapAmountB,0,block.timestamp) (src/staking/Liquidity.sol#72)\n\t- tokenA.approve(address(pools),maxAmountA) (src/staking/Liquidity.sol#96)\n\t- tokenB.approve(address(pools),maxAmountB) (src/staking/Liquidity.sol#97)\n\t- (addedAmountA,addedAmountB,addedLiquidity) = pools.addLiquidity(tokenA,tokenB,maxAmountA,maxAmountB,minLiquidityReceived,totalShares[poolID]) (src/staking/Liquidity.sol#102)\n\tState variables written after the call(s):\n\t- _increaseUserShare(msg.sender,poolID,addedLiquidity,true) (src/staking/Liquidity.sol#107)\n\t\t- totalShares[poolID] = existingTotalShares + increaseShareAmount (src/staking/StakingRewards.sol#89)\n\tStakingRewards.totalShares (src/staking/StakingRewards.sol#42) can be used in cross function reentrancies:\n\t- StakingRewards.totalShares (src/staking/StakingRewards.sol#42)\n\t- StakingRewards.totalSharesForPools(bytes32[]) (src/staking/StakingRewards.sol#212-218)\n\t- StakingRewards.userRewardForPool(address,bytes32) (src/staking/StakingRewards.sol#232-252)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-107",
                " DASP-1"
            ],
            "function": "_depositLiquidityAndIncreaseShare",
            "contract": "Liquidity",
            "line": 232,
            "line_end": 252
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Liquidity._depositLiquidityAndIncreaseShare(IERC20,IERC20,uint256,uint256,uint256,bool) (src/staking/Liquidity.sol#83-117) ignores return value by tokenA.approve(address(pools),maxAmountA) (src/staking/Liquidity.sol#96)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "_depositLiquidityAndIncreaseShare",
            "contract": "Liquidity",
            "line": 96
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Liquidity._dualZapInLiquidity(IERC20,IERC20,uint256,uint256) (src/staking/Liquidity.sol#50-76) ignores return value by tokenA.approve(address(pools),swapAmountA) (src/staking/Liquidity.sol#58)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "_dualZapInLiquidity",
            "contract": "Liquidity",
            "line": 58
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "CollateralAndLiquidity.repayUSDS(uint256) (src/stable/CollateralAndLiquidity.sol#115-135) ignores return value by _walletsWithBorrowedUSDS.remove(msg.sender) (src/stable/CollateralAndLiquidity.sol#132)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "repayUSDS",
            "contract": "CollateralAndLiquidity",
            "line": 132
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "CollateralAndLiquidity.liquidateUser(address) (src/stable/CollateralAndLiquidity.sol#140-188) ignores return value by _walletsWithBorrowedUSDS.remove(wallet) (src/stable/CollateralAndLiquidity.sol#185)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "liquidateUser",
            "contract": "CollateralAndLiquidity",
            "line": 185
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PoolUtils._placeInternalSwap(IPools,IERC20,IERC20,uint256,uint256) (src/pools/PoolUtils.sol#54-68) ignores return value by (reservesIn,None) = pools.getPoolReserves(tokenIn,tokenOut) (src/pools/PoolUtils.sol#59)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "_placeInternalSwap",
            "contract": "PoolUtils",
            "line": 59
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Liquidity._depositLiquidityAndIncreaseShare(IERC20,IERC20,uint256,uint256,uint256,bool) (src/staking/Liquidity.sol#83-117) ignores return value by tokenB.approve(address(pools),maxAmountB) (src/staking/Liquidity.sol#97)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "_depositLiquidityAndIncreaseShare",
            "contract": "Liquidity",
            "line": 97
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "CollateralAndLiquidity.borrowUSDS(uint256) (src/stable/CollateralAndLiquidity.sol#95-111) ignores return value by _walletsWithBorrowedUSDS.add(msg.sender) (src/stable/CollateralAndLiquidity.sol#105)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "borrowUSDS",
            "contract": "CollateralAndLiquidity",
            "line": 105
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Liquidity._dualZapInLiquidity(IERC20,IERC20,uint256,uint256) (src/staking/Liquidity.sol#50-76) ignores return value by tokenB.approve(address(pools),swapAmountB) (src/staking/Liquidity.sol#68)\n",
            "filename": "CollateralAndLiquidity.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "_dualZapInLiquidity",
            "contract": "Liquidity",
            "line": 68
        }
    ]
}