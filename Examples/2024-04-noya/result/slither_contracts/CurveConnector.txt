'forge config --json' running
Could not detect solc version from Foundry config. Falling back to system version...
'solc --version' running
'solc @openzeppelin/=node_modules/@openzeppelin/ eth-gas-reporter/=node_modules/eth-gas-reporter/ hardhat/=node_modules/hardhat/ forge-std/=lib/forge-std/src/ ds-test/=node_modules/ds-test/src/ @uniswap/=node_modules/@uniswap/ @gearbox-protocol/=node_modules/@gearbox-protocol/ @balancer-labs/=node_modules/@balancer-labs/ @layerzerolabs/=node_modules/@layerzerolabs/ base64-sol/=node_modules/base64-sol/ hardhat-deploy/=node_modules/hardhat-deploy/ solidity-bytes-utils/=node_modules/solidity-bytes-utils/ /Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors/CurveConnector.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --optimize --optimize-runs 200 --evm-version paris --allow-paths .,/Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors' running
Compilation warnings/errors on /Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors/CurveConnector.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contracts/external/interfaces/Curve/ICurveSwap.sol


INFO:Detectors:
CurveConnector.LPToUnder(PoolInfo,uint256) (contracts/connectors/CurveConnector.sol#279-288) uses a dangerous strict equality:
	- balance == 0 (contracts/connectors/CurveConnector.sol#280)
BaseConnector._getValue(address,address,uint256) (contracts/helpers/BaseConnector.sol#253-261) uses a dangerous strict equality:
	- amount == 0 (contracts/helpers/BaseConnector.sol#257)
BaseConnector._updateTokenInRegistry(address) (contracts/helpers/BaseConnector.sol#158-160) uses a dangerous strict equality:
	- _updateTokenInRegistry(token,IERC20(token).balanceOf(address(this)) == 0) (contracts/helpers/BaseConnector.sol#159)
CurveConnector.decreaseCurvePosition(address,uint256,uint256,uint256) (contracts/connectors/CurveConnector.sol#160-175) uses a dangerous strict equality:
	- totalLpBalanceOf(poolInfo) == 0 (contracts/connectors/CurveConnector.sol#171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
BaseConnector.sendTokensToTrustedAddress(address,uint256,address,bytes) (contracts/helpers/BaseConnector.sol#84-108) ignores return value by (accountingManager,None) = registry.getVaultAddresses(vaultId) (contracts/helpers/BaseConnector.sol#89)
BaseConnector.sendTokensToTrustedAddress(address,uint256,address,bytes) (contracts/helpers/BaseConnector.sol#84-108) ignores return value by (None,None,None,None,watcherContract,None) = registry.getGovernanceAddresses(vaultId) (contracts/helpers/BaseConnector.sol#91)
BaseConnector._updateTokenInRegistry(address,bool) (contracts/helpers/BaseConnector.sol#135-146) ignores return value by (accountingManager,None) = registry.getVaultAddresses(vaultId) (contracts/helpers/BaseConnector.sol#136)
BaseConnector._updateTokenInRegistry(address,bool) (contracts/helpers/BaseConnector.sol#135-146) ignores return value by registry.updateHoldingPosition(vaultId,positionId,abi.encode(address(this)),,remove) (contracts/helpers/BaseConnector.sol#144)
BaseConnector.addLiquidity(address[],uint256[],bytes) (contracts/helpers/BaseConnector.sol#169-193) ignores return value by ITokenTransferCallBack(msg.sender).sendTokensToTrustedAddress(tokens[i],amounts[i],msg.sender,) (contracts/helpers/BaseConnector.sol#181)
CurveConnector.depositIntoPrisma(address,uint256,bool) (contracts/connectors/CurveConnector.sol#81-94) ignores return value by IDepositToken(depostiToken).deposit(address(this),amount) (contracts/connectors/CurveConnector.sol#93)
CurveConnector.depositIntoConvexBooster(address,uint256,uint256,bool) (contracts/connectors/CurveConnector.sol#103-108) ignores return value by convexBooster.deposit(pid,amount,stake) (contracts/connectors/CurveConnector.sol#107)
CurveConnector.openCurvePosition(address,uint256,uint256,uint256) (contracts/connectors/CurveConnector.sol#117-151) ignores return value by registry.updateHoldingPosition(vaultId,positionId,,,false) (contracts/connectors/CurveConnector.sol#150)
CurveConnector.decreaseCurvePosition(address,uint256,uint256,uint256) (contracts/connectors/CurveConnector.sol#160-175) ignores return value by registry.updateHoldingPosition(vaultId,positionId,,,true) (contracts/connectors/CurveConnector.sol#172)
CurveConnector.withdrawFromConvexBooster(uint256,uint256) (contracts/connectors/CurveConnector.sol#182-185) ignores return value by convexBooster.withdraw(pid,amount) (contracts/connectors/CurveConnector.sol#183)
CurveConnector.withdrawFromConvexRewardPool(address,uint256) (contracts/connectors/CurveConnector.sol#192-195) ignores return value by IConvexBasicRewards(pool).withdraw(amount,true) (contracts/connectors/CurveConnector.sol#193)
CurveConnector.withdrawFromPrisma(address,uint256) (contracts/connectors/CurveConnector.sol#212-215) ignores return value by IDepositToken(depostiToken).withdraw(address(this),amount) (contracts/connectors/CurveConnector.sol#213)
CurveConnector.harvestPrismaRewards(address[]) (contracts/connectors/CurveConnector.sol#233-241) ignores return value by IDepositToken(pools[i]).claimReward(address(this)) (contracts/connectors/CurveConnector.sol#235)
CurveConnector.harvestConvexRewards(address[]) (contracts/connectors/CurveConnector.sol#247-255) ignores return value by baseRewardPool.getReward(address(this),true) (contracts/connectors/CurveConnector.sol#250)
NoyaGovernanceBase.onlyManager() (contracts/governance/NoyaGovernanceBase.sol#31-37) ignores return value by (None,None,None,keeperContract,None,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#32)
NoyaGovernanceBase.onlyEmergency() (contracts/governance/NoyaGovernanceBase.sol#43-47) ignores return value by (None,None,None,None,None,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#44)
NoyaGovernanceBase.onlyEmergencyOrWatcher() (contracts/governance/NoyaGovernanceBase.sol#53-59) ignores return value by (None,None,None,None,watcherContract,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#54)
NoyaGovernanceBase.onlyMaintainerOrEmergency() (contracts/governance/NoyaGovernanceBase.sol#65-69) ignores return value by (None,maintainer,None,None,None,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#66)
NoyaGovernanceBase.onlyMaintainer() (contracts/governance/NoyaGovernanceBase.sol#75-79) ignores return value by (None,maintainer,None,None,None,None) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#76)
NoyaGovernanceBase.onlyGovernance() (contracts/governance/NoyaGovernanceBase.sol#85-89) ignores return value by (governer,None,None,None,None,None) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#86)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
BaseConnector.DUST_LEVEL (contracts/helpers/BaseConnector.sol#31) should be constant 
BaseConnector.MINIMUM_HEALTH_FACTOR (contracts/helpers/BaseConnector.sol#28) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
CurveConnector.CRV (contracts/connectors/CurveConnector.sol#28) should be immutable 
CurveConnector.CVX (contracts/connectors/CurveConnector.sol#27) should be immutable 
CurveConnector.PRISMA (contracts/connectors/CurveConnector.sol#29) should be immutable 
CurveConnector.convexBooster (contracts/connectors/CurveConnector.sol#26) should be immutable 
NoyaGovernanceBase.registry (contracts/governance/NoyaGovernanceBase.sol#7) should be immutable 
NoyaGovernanceBase.vaultId (contracts/governance/NoyaGovernanceBase.sol#8) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors/CurveConnector.sol analyzed (42 contracts with 58 detectors), 32 result(s) found
