'forge config --json' running
Could not detect solc version from Foundry config. Falling back to system version...
'solc --version' running
'solc @openzeppelin/=node_modules/@openzeppelin/ eth-gas-reporter/=node_modules/eth-gas-reporter/ hardhat/=node_modules/hardhat/ forge-std/=lib/forge-std/src/ ds-test/=node_modules/ds-test/src/ @uniswap/=node_modules/@uniswap/ @gearbox-protocol/=node_modules/@gearbox-protocol/ @balancer-labs/=node_modules/@balancer-labs/ @layerzerolabs/=node_modules/@layerzerolabs/ base64-sol/=node_modules/base64-sol/ hardhat-deploy/=node_modules/hardhat-deploy/ solidity-bytes-utils/=node_modules/solidity-bytes-utils/ /Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors/PancakeswapConnector.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --optimize --optimize-runs 200 --evm-version paris --allow-paths .,/Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors' running
Compilation warnings/errors on /Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors/PancakeswapConnector.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contracts/external/interfaces/Pancakeswap/IMasterChefV3.sol

Warning: Unused local variable.
   --> contracts/connectors/UNIv3Connector.sol:129:9:
    |
129 |         uint256 tokenId = abi.decode(p.data, (uint256));
    |         ^^^^^^^^^^^^^^^


INFO:Detectors:
BaseConnector._updateTokenInRegistry(address) (contracts/helpers/BaseConnector.sol#158-160) uses a dangerous strict equality:
	- _updateTokenInRegistry(token,IERC20(token).balanceOf(address(this)) == 0) (contracts/helpers/BaseConnector.sol#159)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
UNIv3Connector.openPosition(MintParams) (contracts/connectors/UNIv3Connector.sol#40-57) ignores return value by (tokenId,None,None,None) = positionManager.mint(p) (contracts/connectors/UNIv3Connector.sol#49)
UNIv3Connector.openPosition(MintParams) (contracts/connectors/UNIv3Connector.sol#40-57) ignores return value by registry.updateHoldingPosition(vaultId,positionId,positionData,abi.encode(p.tickLower,p.tickUpper,p.fee),false) (contracts/connectors/UNIv3Connector.sol#51-53)
UNIv3Connector.decreasePosition(DecreaseLiquidityParams) (contracts/connectors/UNIv3Connector.sol#63-81) ignores return value by positionManager.decreaseLiquidity(p) (contracts/connectors/UNIv3Connector.sol#68)
UNIv3Connector.decreasePosition(DecreaseLiquidityParams) (contracts/connectors/UNIv3Connector.sol#63-81) ignores return value by registry.updateHoldingPosition(vaultId,positionId,positionData,,true) (contracts/connectors/UNIv3Connector.sol#78)
UNIv3Connector.increasePosition(IncreaseLiquidityParams) (contracts/connectors/UNIv3Connector.sol#87-96) ignores return value by positionManager.increaseLiquidity(p) (contracts/connectors/UNIv3Connector.sol#92)
UNIv3Connector.getCurrentLiquidity(uint256) (contracts/connectors/UNIv3Connector.sol#116-119) ignores return value by (None,None,token0,token1,None,None,None,liquidity,None,None,None,None) = positionManager.positions(tokenId) (contracts/connectors/UNIv3Connector.sol#117)
UNIv3Connector._getPositionTVL(HoldingPI,address) (contracts/connectors/UNIv3Connector.sol#127-150) ignores return value by (liquidity,None,None,tokensOwed0,tokensOwed1) = pool.positions(key) (contracts/connectors/UNIv3Connector.sol#138)
UNIv3Connector._getPositionTVL(HoldingPI,address) (contracts/connectors/UNIv3Connector.sol#127-150) ignores return value by (sqrtPriceX96,None,None,None,None,None,None) = pool.slot0() (contracts/connectors/UNIv3Connector.sol#140)
BaseConnector.sendTokensToTrustedAddress(address,uint256,address,bytes) (contracts/helpers/BaseConnector.sol#84-108) ignores return value by (accountingManager,None) = registry.getVaultAddresses(vaultId) (contracts/helpers/BaseConnector.sol#89)
BaseConnector.sendTokensToTrustedAddress(address,uint256,address,bytes) (contracts/helpers/BaseConnector.sol#84-108) ignores return value by (None,None,None,None,watcherContract,None) = registry.getGovernanceAddresses(vaultId) (contracts/helpers/BaseConnector.sol#91)
BaseConnector._updateTokenInRegistry(address,bool) (contracts/helpers/BaseConnector.sol#135-146) ignores return value by (accountingManager,None) = registry.getVaultAddresses(vaultId) (contracts/helpers/BaseConnector.sol#136)
BaseConnector._updateTokenInRegistry(address,bool) (contracts/helpers/BaseConnector.sol#135-146) ignores return value by registry.updateHoldingPosition(vaultId,positionId,abi.encode(address(this)),,remove) (contracts/helpers/BaseConnector.sol#144)
BaseConnector.addLiquidity(address[],uint256[],bytes) (contracts/helpers/BaseConnector.sol#169-193) ignores return value by ITokenTransferCallBack(msg.sender).sendTokensToTrustedAddress(tokens[i],amounts[i],msg.sender,) (contracts/helpers/BaseConnector.sol#181)
NoyaGovernanceBase.onlyManager() (contracts/governance/NoyaGovernanceBase.sol#31-37) ignores return value by (None,None,None,keeperContract,None,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#32)
NoyaGovernanceBase.onlyEmergency() (contracts/governance/NoyaGovernanceBase.sol#43-47) ignores return value by (None,None,None,None,None,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#44)
NoyaGovernanceBase.onlyEmergencyOrWatcher() (contracts/governance/NoyaGovernanceBase.sol#53-59) ignores return value by (None,None,None,None,watcherContract,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#54)
NoyaGovernanceBase.onlyMaintainerOrEmergency() (contracts/governance/NoyaGovernanceBase.sol#65-69) ignores return value by (None,maintainer,None,None,None,emergencyManager) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#66)
NoyaGovernanceBase.onlyMaintainer() (contracts/governance/NoyaGovernanceBase.sol#75-79) ignores return value by (None,maintainer,None,None,None,None) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#76)
NoyaGovernanceBase.onlyGovernance() (contracts/governance/NoyaGovernanceBase.sol#85-89) ignores return value by (governer,None,None,None,None,None) = registry.getGovernanceAddresses(vaultId) (contracts/governance/NoyaGovernanceBase.sol#86)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
BaseConnector.DUST_LEVEL (contracts/helpers/BaseConnector.sol#31) should be constant 
BaseConnector.MINIMUM_HEALTH_FACTOR (contracts/helpers/BaseConnector.sol#28) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
NoyaGovernanceBase.registry (contracts/governance/NoyaGovernanceBase.sol#7) should be immutable 
NoyaGovernanceBase.vaultId (contracts/governance/NoyaGovernanceBase.sol#8) should be immutable 
PancakeswapConnector.masterchef (contracts/connectors/PancakeswapConnector.sol#12) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:/Users/tanzezhong/GPT4Bugs-main/Examples/2024-04-noya/contracts/connectors/PancakeswapConnector.sol analyzed (50 contracts with 58 detectors), 25 result(s) found
