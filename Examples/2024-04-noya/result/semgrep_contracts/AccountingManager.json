{
    "success": true,
    "finding_length": 69,
    "findings": [
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 603
        },
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 608
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 286
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 436
        },
        {
            "classification": [],
            "name": "inefficient-state-variable-increment",
            "category": "performance",
            "message": "te-variable-increment <x> += <y> costs more gas than <x> = <x> + <y> for state variables. Details: https://sg.run/bp9v",
            "line": 569
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 94
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 95
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 96
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 97
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 98
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 99
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 100
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 101
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 102
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 103
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 233
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 233
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 237
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 268
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 269
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 269
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 272
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 281
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 339
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 339
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 343
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 407
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 408
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 408
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 412
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 416
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 416
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 418
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 423
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 428
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 432
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 555
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 557
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 559
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 566
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 604
        },
        {
            "classification": [],
            "name": "state-variable-read-in-a-loop",
            "category": "performance",
            "message": "-a-loop Replace state variable reads and writes within loops with local variable reads and writes. Details: https://sg.run/xADy",
            "line": 609
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 551
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 603
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 608
        },
        {
            "classification": [],
            "name": "use-custom-error-not-require",
            "category": "performance",
            "message": "quire Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec. Details: https://sg.run/ej3L",
            "line": 686
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 361
        },
        {
            "classification": [],
            "name": "use-multiple-require",
            "category": "performance",
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/vGA0",
            "line": 371
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 186
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 187
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 188
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 288
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 289
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 290
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 291
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 292
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 293
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 294
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 295
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 296
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 335
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 336
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 337
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 374
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 375
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 376
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 551
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 603
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 608
        }
    ]
}