METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 17 Code Findings │
└──────────────────┘
                                                    
    /g4b/contracts/connectors/BalancerFlashLoan.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
           74┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
           79┆ for (uint256 i = 0; i < destinationConnector.length; i++) {
            ⋮┆----------------------------------------
           84┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
           89┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor.non-payable-constructor
          Consider making costructor payable to save gas.                  
          Details: https://sg.run/wRBd                                     
                                                                           
           24┆ constructor(address _balancerVault, PositionRegistry _registry) {
           25┆     require(_balancerVault != address(0));
           26┆     require(address(_registry) != address(0));
           27┆     vault = IBalancerVault(_balancerVault);
           28┆     registry = _registry;
           29┆ }
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                
                
          Details: https://sg.run/OvDk                                          
                                                                                
           74┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
           79┆ for (uint256 i = 0; i < destinationConnector.length; i++) {
            ⋮┆----------------------------------------
           84┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
           89┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
           82┆ require(success, "BalancerFlashLoan: Flash loan failed");
            ⋮┆----------------------------------------
           92┆ require(tokens[i].balanceOf(address(this)) == 0,                 
  "BalancerFlashLoan: Flash loan extra tokens");                                
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
           74┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
           79┆ for (uint256 i = 0; i < destinationConnector.length; i++) {
            ⋮┆----------------------------------------
           84┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
           89┆ for (uint256 i = 0; i < tokens.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string.use-short-revert-string     
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
          Details: https://sg.run/E9LB                                          
                                                                                
           82┆ require(success, "BalancerFlashLoan: Flash loan failed");
            ⋮┆----------------------------------------
           92┆ require(tokens[i].balanceOf(address(this)) == 0,                 
  "BalancerFlashLoan: Flash loan extra tokens");                                

┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 17 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
