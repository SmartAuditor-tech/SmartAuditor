METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 15 Code Findings │
└──────────────────┘
                                                  
    /g4b/contracts/accountingManager/Registry.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
          253┆ for (uint256 i = 0; i < usingTokens.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor.non-payable-constructor
          Consider making costructor payable to save gas.                  
          Details: https://sg.run/wRBd                                     
                                                                           
           66┆ constructor(address _governer, address _maintainer, address      
  _emergency, address _flashLoan) {                                             
           67┆     require(_governer != address(0));
           68┆     require(_maintainer != address(0));
           69┆     require(_emergency != address(0));
           70┆     _grantRole(GOVERNER_ROLE, _governer);
           71┆     _grantRole(MAINTAINER_ROLE, _maintainer);
           72┆     _grantRole(EMERGENCY_ROLE, _emergency);
           73┆     _setRoleAdmin(GOVERNER_ROLE, GOVERNER_ROLE);
           74┆     _setRoleAdmin(MAINTAINER_ROLE, GOVERNER_ROLE);
           75┆     _setRoleAdmin(EMERGENCY_ROLE, GOVERNER_ROLE);
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
          138┆ for (uint256 i = 0; i < _trustedTokens.length; i++) {
            ⋮┆----------------------------------------
          194┆ for (uint256 i = 0; i < _connectorAddresses.length; i++) {
            ⋮┆----------------------------------------
          214┆ for (uint256 i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
          253┆ for (uint256 i = 0; i < usingTokens.length; i++) {
            ⋮┆----------------------------------------
          274┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
           40┆ if (msg.sender != vaults[_vaultId].maintainerWithoutTimeLock &&  
  hasRole(EMERGENCY_ROLE, msg.sender) == false) {                               
           41┆     revert UnauthorizedAccess();
           42┆ }
            ⋮┆----------------------------------------
           47┆ if (msg.sender != vaults[_vaultId].governer &&                   
  hasRole(EMERGENCY_ROLE, msg.sender) == false) {                               
           48┆     revert UnauthorizedAccess();
           49┆ }
            ⋮┆----------------------------------------
          347┆ if (positionIndex == 0 && removePosition) return                 
  type(uint256).max;                                                            
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
          138┆ for (uint256 i = 0; i < _trustedTokens.length; i++) {
            ⋮┆----------------------------------------
          194┆ for (uint256 i = 0; i < _connectorAddresses.length; i++) {
            ⋮┆----------------------------------------
          214┆ for (uint256 i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
          253┆ for (uint256 i = 0; i < usingTokens.length; i++) {
            ⋮┆----------------------------------------
          274┆ for (uint256 i = 0; i < length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 15 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
