METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 50 Code rules:
  Scanning 1 file with 50 solidity rules.
                    
                    
┌──────────────────┐
│ 12 Code Findings │
└──────────────────┘
                                                                       
    /g4b/contracts/helpers/SwapHandler/GenericSwapAndBridgeHandler.sol 
       solidity.performance.array-length-outside-loop.array-length-outside-loop 
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
          Details: https://sg.run/r4LJ                                          
                                                                                
           37┆ for (uint256 i = 0; i < usersAddresses.length; i++) {
            ⋮┆----------------------------------------
          148┆ for (uint256 i = 0; i < _routes.length;) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor.non-payable-constructor
          Consider making costructor payable to save gas.                  
          Details: https://sg.run/wRBd                                     
                                                                           
           34┆ constructor(address[] memory usersAddresses, address             
  _valueOracle, PositionRegistry _registry, uint256 _vaultId)                   
           35┆     NoyaGovernanceBase(_registry, _vaultId)
           36┆ {
           37┆     for (uint256 i = 0; i < usersAddresses.length; i++) {
           38┆         isEligibleToUse[usersAddresses[i]] = true;
           39┆     }
           40┆     valueOracle = INoyaValueOracle(_valueOracle);
           41┆     require(_valueOracle != address(0));
           42┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop.state-variable-read-in
  -a-loop                                                                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
          Details: https://sg.run/xADy                                          
                                                                                
           38┆ isEligibleToUse[usersAddresses[i]] = true;
            ⋮┆----------------------------------------
          149┆ routes.push(_routes[i]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop.unnecessary-c
  hecked-arithmetic-in-loop                                                     
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
          Details: https://sg.run/OvDk                                          
                                                                                
           37┆ for (uint256 i = 0; i < usersAddresses.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require.use-custom-error-not-re
  quire                                                                         
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
          Details: https://sg.run/ej3L                                          
                                                                                
           25┆ require(isEligibleToUse[msg.sender], "NoyaSwapHandler: Not       
  eligible to use");                                                            
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if.use-nested-if                         
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
          Details: https://sg.run/dXw0                                          
                                                                                
           30┆ if (routes[_routeId].route == address(0) &&                      
  !routes[_routeId].isEnabled) revert RouteNotFound();                          
            ⋮┆----------------------------------------
          102┆ if (_swapRequest.checkForSlippage && _swapRequest.minAmount == 0)
  {                                                                             
          103┆     // set minAmount so that slippage can be checked
          104┆     uint256 _slippageTolerance =                                 
  slippageTolerance[_swapRequest.inputToken][_swapRequest.outputToken];         
          105┆     if (_slippageTolerance == 0) {
          106┆         _slippageTolerance = genericSlippageTolerance;
          107┆     }
          108┆     INoyaValueOracle _priceOracle =                              
  INoyaValueOracle(valueOracle);                                                
          109┆     uint256 _outputTokenValue =
          110┆         _priceOracle.getValue(_swapRequest.inputToken,           
  _swapRequest.outputToken, _swapRequest.amount);                               
          111┆ 
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix.use-prefix-incremen
  t-not-postfix                                                                 
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
          Details: https://sg.run/nxLr                                          
                                                                                
           37┆ for (uint256 i = 0; i < usersAddresses.length; i++) {
            ⋮┆----------------------------------------
          152┆ i++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string.use-short-revert-string     
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
          Details: https://sg.run/E9LB                                          
                                                                                
           25┆ require(isEligibleToUse[msg.sender], "NoyaSwapHandler: Not       
  eligible to use");                                                            

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 50 rules on 1 file: 12 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
