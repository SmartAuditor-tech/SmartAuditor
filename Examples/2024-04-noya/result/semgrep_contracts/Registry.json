{
    "success": true,
    "finding_length": 28,
    "findings": [
        {
            "classification": [],
            "name": "array-length-outside-loop",
            "category": "performance",
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop. Details: https://sg.run/r4LJ",
            "line": 253
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 66
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 67
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 68
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 69
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 70
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 71
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 72
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 73
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 74
        },
        {
            "classification": [],
            "name": "non-payable-constructor",
            "category": "performance",
            "message": "Consider making costructor payable to save gas. Details: https://sg.run/wRBd",
            "line": 75
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 138
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 194
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 214
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 253
        },
        {
            "classification": [],
            "name": "unnecessary-checked-arithmetic-in-loop",
            "category": "performance",
            "message": "hecked-arithmetic-in-loop A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks. Details: https://sg.run/OvDk",
            "line": 274
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 40
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 41
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 42
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 47
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 48
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 49
        },
        {
            "classification": [],
            "name": "use-nested-if",
            "category": "performance",
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports. Details: https://sg.run/dXw0",
            "line": 347
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 138
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 194
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 214
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 253
        },
        {
            "classification": [],
            "name": "use-prefix-increment-not-postfix",
            "category": "performance",
            "message": "t-not-postfix Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas. Details: https://sg.run/nxLr",
            "line": 274
        }
    ]
}