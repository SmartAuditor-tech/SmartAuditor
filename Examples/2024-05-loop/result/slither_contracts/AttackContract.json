{
    "success": true,
    "finding_length": 22,
    "findings": [
        {
            "name": "arbitrary-send-eth",
            "impact": "High",
            "confidence": "Medium",
            "message": "PrelaunchPoints._fillQuote(IERC20,uint256,bytes) (src/PrelaunchPoints.sol#491-505) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success,None) = address(exchangeProxy).call{value: 0}(_swapCallData) (src/PrelaunchPoints.sol#497)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "_fillQuote",
            "contract": "PrelaunchPoints",
            "line": 497
        },
        {
            "name": "incorrect-exp",
            "impact": "High",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#184)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 184
        },
        {
            "name": "reentrancy-eth",
            "impact": "High",
            "confidence": "Medium",
            "message": "Reentrancy in PrelaunchPoints.convertAllETH() (src/PrelaunchPoints.sol#315-330):\n\tExternal calls:\n\t- lpETH.deposit{value: totalBalance}(address(this)) (src/PrelaunchPoints.sol#322)\n\tState variables written after the call(s):\n\t- startClaimDate = uint32(block.timestamp) (src/PrelaunchPoints.sol#327)\n\tPrelaunchPoints.startClaimDate (src/PrelaunchPoints.sol#46) can be used in cross function reentrancies:\n\t- PrelaunchPoints.claim(address,uint8,PrelaunchPoints.Exchange,bytes) (src/PrelaunchPoints.sol#211-216)\n\t- PrelaunchPoints.claimAndStake(address,uint8,PrelaunchPoints.Exchange,bytes) (src/PrelaunchPoints.sol#226-235)\n\t- PrelaunchPoints.constructor(address,address,address[]) (src/PrelaunchPoints.sol#97-114)\n\t- PrelaunchPoints.convertAllETH() (src/PrelaunchPoints.sol#315-330)\n\t- PrelaunchPoints.startClaimDate (src/PrelaunchPoints.sol#46)\n\t- PrelaunchPoints.withdraw(address) (src/PrelaunchPoints.sol#274-306)\n",
            "filename": "AttackContract.sol",
            "classification": [
                "SWC-107",
                " DASP-1"
            ],
            "function": "convertAllETH",
            "contract": "PrelaunchPoints",
            "line": 274,
            "line_end": 306
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#190)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 190
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#193)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 193
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#188)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 188
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#184)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 184
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#172)\n\t- result = prod0 * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#199)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 199
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#192)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 192
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#191)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 191
        },
        {
            "name": "divide-before-multiply",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)\n\t- inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#189)\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "function": "mulDiv",
            "contract": "Math",
            "line": 189
        },
        {
            "name": "locked-ether",
            "impact": "Medium",
            "confidence": "High",
            "message": "Contract locking ether found:\n\tContract AttackContract (src/mock/AttackContract.sol#6-30) has payable functions:\n\t - AttackContract.receive() (src/mock/AttackContract.sol#23-29)\n\tBut does not have a function to withdraw the ether\n",
            "filename": "AttackContract.sol",
            "classification": [
                "DASP-5"
            ],
            "line": 23,
            "line_end": 29
        },
        {
            "name": "uninitialized-local",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints._validateData(address,uint256,PrelaunchPoints.Exchange,bytes).recipient (src/PrelaunchPoints.sol#409) is a local variable never initialized\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "line": 409
        },
        {
            "name": "uninitialized-local",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints._validateData(address,uint256,PrelaunchPoints.Exchange,bytes).inputTokenAmount (src/PrelaunchPoints.sol#408) is a local variable never initialized\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "line": 408
        },
        {
            "name": "uninitialized-local",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints._validateData(address,uint256,PrelaunchPoints.Exchange,bytes).outputToken (src/PrelaunchPoints.sol#407) is a local variable never initialized\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "line": 407
        },
        {
            "name": "uninitialized-local",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints._validateData(address,uint256,PrelaunchPoints.Exchange,bytes).inputToken (src/PrelaunchPoints.sol#406) is a local variable never initialized\n",
            "filename": "AttackContract.sol",
            "classification": [],
            "line": 406
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints._claim(address,address,uint8,PrelaunchPoints.Exchange,bytes) (src/PrelaunchPoints.sol#240-266) ignores return value by lpETH.deposit{value: claimedAmount}(_receiver) (src/PrelaunchPoints.sol#263)\n",
            "filename": "AttackContract.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "_claim",
            "contract": "PrelaunchPoints",
            "line": 263
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints.claimAndStake(address,uint8,PrelaunchPoints.Exchange,bytes) (src/PrelaunchPoints.sol#226-235) ignores return value by lpETH.approve(address(lpETHVault),claimedAmount) (src/PrelaunchPoints.sol#231)\n",
            "filename": "AttackContract.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "claimAndStake",
            "contract": "PrelaunchPoints",
            "line": 231
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints.claimAndStake(address,uint8,PrelaunchPoints.Exchange,bytes) (src/PrelaunchPoints.sol#226-235) ignores return value by lpETHVault.stake(claimedAmount,msg.sender) (src/PrelaunchPoints.sol#232)\n",
            "filename": "AttackContract.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "claimAndStake",
            "contract": "PrelaunchPoints",
            "line": 232
        },
        {
            "name": "unused-return",
            "impact": "Medium",
            "confidence": "Medium",
            "message": "PrelaunchPoints.convertAllETH() (src/PrelaunchPoints.sol#315-330) ignores return value by lpETH.deposit{value: totalBalance}(address(this)) (src/PrelaunchPoints.sol#322)\n",
            "filename": "AttackContract.sol",
            "classification": [
                "SWC-104",
                " DASP-4"
            ],
            "function": "convertAllETH",
            "contract": "PrelaunchPoints",
            "line": 322
        },
        {
            "name": "constable-states",
            "impact": "Optimization",
            "confidence": "High",
            "message": "AttackContract.emptydata (src/mock/AttackContract.sol#9) should be constant \n",
            "filename": "AttackContract.sol",
            "classification": [],
            "line": 9
        },
        {
            "name": "immutable-states",
            "impact": "Optimization",
            "confidence": "High",
            "message": "AttackContract.prelaunchPoints (src/mock/AttackContract.sol#7) should be immutable \n",
            "filename": "AttackContract.sol",
            "classification": [],
            "line": 7
        }
    ]
}